#!/usr/bin/env zsh
#
# set up dotfiles

export PATH=".:./bin:$PATH"

cd "$(dirname "$0")/.."
DOTFILES_ROOT="$(pwd -P)"

set -e

echo ''

# Using zsh's built-in parameter expansion
sanitize() {
    local input="$1"
    print -r -- "${input}"
}


setup_gitconfig () {
  if [[ ! -f git/gitconfig.local.symlink ]]; then
    dotlog "info" 'setup gitconfig'

    git_credential='cache'
    if [[ "$(uname)" == "Darwin" ]]; then
      git_credential='osxkeychain'
    fi

    dotlog "user" ' - What is your github author name?'
    read -r git_authorname
    dotlog "user" ' - What is your github author email?'
    read -r git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    dotlog "success" 'gitconfig'
  fi
}

link_file () {
  local src=$1 dst=$2
  local overwrite= backup= skip=
  local action=

  if [[ -e "$dst" ]]; then
    if [[ "$overwrite_all" != "true" && "$backup_all" != "true" && "$skip_all" != "true" ]]; then
      local currentSrc="$(readlink "$dst")"

      if [[ "$currentSrc" == "$src" ]]; then
        skip=true
      else
        dotlog "user" "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -k action

        case "$action" in
          o) overwrite=true ;;
          O) overwrite_all=true ;;
          b) backup=true ;;
          B) backup_all=true ;;
          s) skip=true ;;
          S) skip_all=true ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [[ "$overwrite" == "true" ]]; then
      rm -rf "$dst"
      dotlog "success" "removed $dst"
    fi

    if [[ "$backup" == "true" ]]; then
      mv "$dst" "${dst}.backup"
      dotlog "success" "moved $dst to ${dst}.backup"
    fi

    if [[ "$skip" == "true" ]]; then
      dotlog "success" "skipped $src"
    fi
  fi

  if [[ "$skip" != "true" ]]; then
    ln -s "$1" "$2"
    dotlog "success" "linked $1 to $2"
  fi
}

install_dotfiles () {
  dotlog "info" 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $DOTFILES_ROOT/**/*.symlink(.); do
    [[ $src == */.git/* ]] && continue
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_gitconfig
install_dotfiles

# If we're on a Mac, let's install and setup homebrew.
if [[ "$(uname)" == "Darwin" ]]; then
  dotlog "info" "installing dependencies"
  if source bin/dot | while read -r data; do echo "$data"; done; then
    dotlog "success" "dependencies installed"
  else
    dotlog "error" "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
echo '  Be sure to install homebrew packages, in a new terminal session, run:'
echo "    brew bundle --file=$DOTFILES/homebrew/Brewfile"